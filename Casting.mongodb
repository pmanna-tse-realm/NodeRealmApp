// Proper way under MongoDB 4.x
use video;

// Rename old collection
db.movieDetails.renameCollection("oldMovieDetails");

// Prepare the aggregate operation to convert fields from on type to another
ratingConversionStage = {
    $addFields: {
        "tomato.doubleUserRating": { $convert: { input: "$tomato.userRating", to: "double", onError: undefined, onNull: null } },
        "tomato.doubleRating": { $convert: { input: "$tomato.rating", to: "double", onError: undefined, onNull: null } },
        "imdb.doubleRating": { $convert: { input: "$imdb.rating", to: "double", onError: undefined, onNull: null } }
    }
 };
 
// Aggregate into the new collection, converting data
// This creates embedded collections where none existed before, though
db.oldMovieDetails.aggregate( [
    ratingConversionStage, {$out:"movieDetails"}
]);

// Remove embedded collections, that were unduly added
db.movieDetails.updateMany({"tomato.userRating": {$exists: false}},{"$unset": { "tomato": 1}});
db.movieDetails.updateMany({"imdb.rating": {$exists: false}},{"$unset": { "imdb": 1}});

// Remove all old data, and rename fields to match original structure
db.movieDetails.updateMany({},{"$unset": { "tomato.rating": 1, "tomato.userRating": 1, "imdb.rating": 1}});
db.movieDetails.updateMany({},{"$rename": { "tomato.doubleRating":"tomato.rating", "tomato.doubleUserRating":"tomato.userRating", "imdb.doubleRating": "imdb.rating"}});

// Finally, drop old collection
db.oldMovieDetails.drop();
